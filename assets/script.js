"use strict";
const API_BASE_URL = 'https://backendchater.fly.dev';
let userRole = null;
let appContent = {};
let userName = null;
let userFavorites = [];
const isMobile = () => window.matchMedia("(max-width: 768px)").matches;

// –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const uiTexts = {
    ru: {
        // ... —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ ...
        navTemplates: '–®–∞–±–ª–æ–Ω—ã',
        navMenu: '–ú–µ–Ω—é',
        backToMenu: '–ù–∞–∑–∞–¥',
        analyticsOnlyForManagers: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º',
        openEditor: '–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä',
        manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        employee: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
        // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
        lang_locale: 'ru', loginHeader: 'ChaterLab', loginSubheader: '–ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', loginUsername: '–õ–æ–≥–∏–Ω', loginPassword: '–ü–∞—Ä–æ–ª—å', loginBtn: '–í–æ–π—Ç–∏', searchPlaceholder: 'üîé –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω–∞–º...', favoritesTitle: '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', darkMode: '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞', logout: '–í—ã–π—Ç–∏', navInstructions: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', navAnalytics: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', navEditor: '–†–µ–¥–∞–∫—Ç–æ—Ä', mobileAdminTitle: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', editorUnavailable: '–†–µ–¥–∞–∫—Ç–æ—Ä', editorUnavailableMsg: '–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Ä—Å–∏–∏ —Å–∞–π—Ç–∞ –¥–ª—è –ü–ö.', tabLayout: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫', tabInstructions: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', tabManagers: '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã', tabUsers: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', addUserTitle: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', newUserUsername: '–õ–æ–≥–∏–Ω', newUserPassword: '–ü–∞—Ä–æ–ª—å', roleEmployee: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', roleManager: '–ú–µ–Ω–µ–¥–∂–µ—Ä', addUserBtn: '–°–æ–∑–¥–∞—Ç—å', existingUsersTitle: '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', deleteUserBtn: '–£–¥–∞–ª–∏—Ç—å', deleteUserConfirm: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}?', addManager: '+ –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', managerNamePlaceholder: '–ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–ª—è —Å–ø–∏—Å–∫–∞)', managerTelegramPlaceholder: 'Telegram –∫–æ–Ω—Ç–∞–∫—Ç (@username)', managerWhatsappPlaceholder: 'WhatsApp –∫–æ–Ω—Ç–∞–∫—Ç (+7123456)', deleteManagerTitle: '–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', managerAssignmentTitle: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏', isContactButtonLabel: '–°–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π "–ö–æ–Ω—Ç–∞–∫—Ç"', saveAll: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë', cancel: '–û—Ç–º–µ–Ω–∞', addSection: '+ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª', addButton: '+ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Ä–∞–∑–¥–µ–ª', addVariant: '+ –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç', sectionTitle: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞', buttonLabel: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏', deleteSectionConfirm: '–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ –≤—Å–µ–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏?', deleteButtonTitle: '–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª', deleteButtonEntryTitle: '–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É', deleteVariantTitle: '–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç', instructionTitleRu: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (RU)', instructionTitleEn: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (EN)', instructionTitleUk: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (UA)', analyticsTitle: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', periodDay: '–î–µ–Ω—å', periodWeek: '–ù–µ–¥–µ–ª—è', periodMonth: '–ú–µ—Å—è—Ü', employeeListTitle: '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', overallSummaryHeader: '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', overallSummarySubheader: '–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã.', kpiTotalClicks: '–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π', kpiMostActive: '–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π', kpiTopTemplate: '–¢–æ–ø —à–∞–±–ª–æ–Ω', kpiPeakTime: '–ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (UTC)', top5Employees: '–¢–æ–ø-5 –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', top5Templates: '–¢–æ–ø-5 –®–∞–±–ª–æ–Ω–æ–≤', tableEmployee: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', tableActions: '–î–µ–π—Å—Ç–≤–∏–π', tableTemplate: '–®–∞–±–ª–æ–Ω', tableUses: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π', userDetailHeader: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', userDetailSubheader: '–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.', kpiLastActivity: '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', kpiFavTemplate: '–õ—é–±–∏–º—ã–π —à–∞–±–ª–æ–Ω', activityFeedTitle: '–õ–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –¥–µ–π—Å—Ç–≤–∏–π)', tableTime: '–í—Ä–µ–º—è', tableSection: '–†–∞–∑–¥–µ–ª', noData: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.', loading: '–ó–∞–≥—Ä—É–∑–∫–∞...', modalTitle: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞', modalChannelTitle: '1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏', modalManagerTitle: '2. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞', modalCancel: '–û—Ç–º–µ–Ω–∞', modalConfirm: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', modalError: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.', username_and_password_required: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.', invalid_credentials: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', server_error: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', content_not_found: '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', content_read_error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.', invalid_token: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.', access_denied: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.', content_updated_successfully: '–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', server_error_on_save: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.', user_not_found: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', invalid_data_format: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.', favorites_updated: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.', button_id_not_specified: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–Ω–æ–ø–∫–∏.', click_tracking_error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–∫–∞.', analytics_db_error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ –ë–î.', analytics_server_error: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.', analytics_load_error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', no_templates_for_button: '–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏', copy_success: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ({current}/{total})', copy_success_generic: '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', favorites_load_error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', favorites_save_error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', missing_user_data: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.', invalid_role: '–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', user_created_successfully: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', user_already_exists: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', server_error_creating_user: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', username_not_provided: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', cannot_delete_self: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.', user_deleted_successfully: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', server_error_deleting_user: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', server_error_fetching_users: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
    },
    en: {
        // ... —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ ...
        navTemplates: 'Templates',
        navMenu: 'Menu',
        backToMenu: 'Back',
        analyticsOnlyForManagers: 'Analytics is available only for managers',
        openEditor: 'Open Editor',
        manager: 'Manager',
        employee: 'Employee',
        // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
        lang_locale: 'en', loginHeader: 'ChaterLab', loginSubheader: 'Quick Replies Panel', loginUsername: 'Username', loginPassword: 'Password', loginBtn: 'Login', searchPlaceholder: 'üîé Search templates...', favoritesTitle: '‚≠ê Favorites', darkMode: 'Dark Mode', logout: 'Logout', navInstructions: 'Instructions', navAnalytics: 'Analytics', navEditor: 'Editor', mobileAdminTitle: 'Admin Panel', editorUnavailable: 'Editor', editorUnavailableMsg: 'Full editing is only available on the desktop version of the site.', tabLayout: 'Button Builder', tabInstructions: 'Instructions', tabManagers: 'Managers', tabUsers: 'Users', addUserTitle: 'Add New User', newUserUsername: 'Username', newUserPassword: 'Password', roleEmployee: 'Employee', roleManager: 'Manager', addUserBtn: 'Create', existingUsersTitle: 'Existing Users', deleteUserBtn: 'Delete', deleteUserConfirm: 'Are you sure you want to delete user {username}?', addManager: '+ Add Manager', managerNamePlaceholder: 'Manager Name (for the list)', managerTelegramPlaceholder: 'Telegram contact (@username)', managerWhatsappPlaceholder: 'WhatsApp contact (+123456)', deleteManagerTitle: 'Delete Manager', managerAssignmentTitle: 'Available Managers for this Button', isContactButtonLabel: 'Make "Contact" button', saveAll: 'Save All', cancel: 'Cancel', addSection: '+ Add New Section', addButton: '+ Add Button to Section', addVariant: '+ Add Variant', sectionTitle: 'Section Title', buttonLabel: 'Button Label', deleteSectionConfirm: 'Delete this section with all buttons?', deleteButtonTitle: 'Delete Section', deleteButtonEntryTitle: 'Delete Button', deleteVariantTitle: 'Delete Variant', instructionTitleRu: 'Instructions (RU)', instructionTitleEn: 'Instructions (EN)', instructionTitleUk: 'Instructions (UA)', analyticsTitle: 'Analytics', periodDay: 'Day', periodWeek: 'Week', periodMonth: 'Month', employeeListTitle: 'Overall Statistics', overallSummaryHeader: 'Overall Statistics', overallSummarySubheader: 'Summary report on the activity of the entire team.', kpiTotalClicks: 'Total Actions', kpiMostActive: 'Most Active', kpiTopTemplate: 'Top Template', kpiPeakTime: 'Peak Activity (UTC)', top5Employees: 'Top 5 Employees', top5Templates: 'Top 5 Templates', tableEmployee: 'Employee', tableActions: 'Actions', tableTemplate: 'Template', tableUses: 'Uses', userDetailHeader: 'Statistics for:', userDetailSubheader: 'Detailed activity report for the selected employee.', kpiLastActivity: 'Last Activity', kpiFavTemplate: 'Favorite Template', activityFeedTitle: 'Activity Feed (last 100 actions)', tableTime: 'Time', tableSection: 'Section', noData: 'No data for this period.', loading: 'Loading...', modalTitle: 'Create Contact', modalChannelTitle: '1. Select Channel', modalManagerTitle: '2. Select Manager', modalCancel: 'Cancel', modalConfirm: 'Generate & Copy', modalError: 'Please select a channel and a manager.', username_and_password_required: 'Username and password are required.', invalid_credentials: 'Invalid credentials.', server_error: 'Server error.', content_not_found: 'Content not found.', content_read_error: 'Error reading content.', invalid_token: 'Invalid token.', access_denied: 'Access denied.', content_updated_successfully: 'Content updated successfully!', server_error_on_save: 'Server error on save.', user_not_found: 'User not found.', invalid_data_format: 'Invalid data format.', favorites_updated: 'Favorites updated.', button_id_not_specified: 'Button ID not specified.', click_tracking_error: 'Error tracking click.', analytics_db_error: 'Error getting analytics from DB.', analytics_server_error: 'Server error while getting analytics.', analytics_load_error: 'Error loading statistics', no_templates_for_button: 'No templates for this button', copy_success: 'Copied ({current}/{total})', copy_success_generic: 'Text copied successfully!', favorites_load_error: 'Failed to load favorites', favorites_save_error: 'Error saving favorites', missing_user_data: 'Username and password are required.', invalid_role: 'Invalid user role.', user_created_successfully: 'User created successfully!', user_already_exists: 'A user with this name already exists.', server_error_creating_user: 'Server error while creating user.', username_not_provided: 'Username for deletion not provided.', cannot_delete_self: 'You cannot delete yourself.', user_deleted_successfully: 'User deleted successfully!', server_error_deleting_user: 'Server error while deleting user.', server_error_fetching_users: 'Server error while fetching user list.'
    },
    uk: {
        // ... —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ ...
        navTemplates: '–®–∞–±–ª–æ–Ω–∏',
        navMenu: '–ú–µ–Ω—é',
        backToMenu: '–ù–∞–∑–∞–¥',
        analyticsOnlyForManagers: '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º',
        openEditor: '–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä',
        manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        employee: '–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫',
        // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
        lang_locale: 'uk', loginHeader: 'ChaterLab', loginSubheader: '–ü–∞–Ω–µ–ª—å —à–≤–∏–¥–∫–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π', loginUsername: '–õ–æ–≥—ñ–Ω', loginPassword: '–ü–∞—Ä–æ–ª—å', loginBtn: '–£–≤—ñ–π—Ç–∏', searchPlaceholder: 'üîé –ü–æ—à—É–∫ –ø–æ —à–∞–±–ª–æ–Ω–∞—Ö...', favoritesTitle: '‚≠ê –û–±—Ä–∞–Ω–µ', darkMode: '–¢–µ–º–Ω–∞ —Ç–µ–º–∞', logout: '–í–∏–π—Ç–∏', navInstructions: '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è', navAnalytics: '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', navEditor: '–†–µ–¥–∞–∫—Ç–æ—Ä', mobileAdminTitle: '–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å', editorUnavailable: '–†–µ–¥–∞–∫—Ç–æ—Ä', editorUnavailableMsg: '–ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–µ –ª–∏—à–µ —É –≤–µ—Ä—Å—ñ—ó —Å–∞–π—Ç—É –¥–ª—è –ü–ö.', tabLayout: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫', tabInstructions: '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è', tabManagers: '–ú–µ–Ω–µ–¥–∂–µ—Ä–∏', tabUsers: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ', addUserTitle: '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', newUserUsername: '–õ–æ–≥—ñ–Ω', newUserPassword: '–ü–∞—Ä–æ–ª—å', roleEmployee: '–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫', roleManager: '–ú–µ–Ω–µ–¥–∂–µ—Ä', addUserBtn: '–°—Ç–≤–æ—Ä–∏—Ç–∏', existingUsersTitle: '–Ü—Å–Ω—É—é—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ', deleteUserBtn: '–í–∏–¥–∞–ª–∏—Ç–∏', deleteUserConfirm: '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username}?', addManager: '+ –î–æ–¥–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞', managerNamePlaceholder: '–Ü–º\'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–ª—è —Å–ø–∏—Å–∫—É)', managerTelegramPlaceholder: 'Telegram –∫–æ–Ω—Ç–∞–∫—Ç (@username)', managerWhatsappPlaceholder: 'WhatsApp –∫–æ–Ω—Ç–∞–∫—Ç (+38012345)', deleteManagerTitle: '–í–∏–¥–∞–ª–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞', managerAssignmentTitle: '–î–æ—Å—Ç—É–ø–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –¥–ª—è —Ü—ñ—î—ó –∫–Ω–æ–ø–∫–∏', isContactButtonLabel: '–ó—Ä–æ–±–∏—Ç–∏ –∫–Ω–æ–ø–∫–æ—é "–ö–æ–Ω—Ç–∞–∫—Ç"', saveAll: '–ó–±–µ—Ä–µ–≥—Ç–∏ –≤—Å–µ', cancel: '–°–∫–∞—Å—É–≤–∞—Ç–∏', addSection: '+ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª', addButton: '+ –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–æ —Ä–æ–∑–¥—ñ–ª—É', addVariant: '+ –î–æ–¥–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç', sectionTitle: '–ù–∞–∑–≤–∞ —Ä–æ–∑–¥—ñ–ª—É', buttonLabel: '–ù–∞–∑–≤–∞ –∫–Ω–æ–ø–∫–∏', deleteSectionConfirm: '–í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ä–æ–∑–¥—ñ–ª –∑ —É—Å—ñ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏?', deleteButtonTitle: '–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª', deleteButtonEntryTitle: '–í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫—É', deleteVariantTitle: '–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç', instructionTitleRu: '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è (RU)', instructionTitleEn: '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è (EN)', instructionTitleUk: '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è (UA)', analyticsTitle: '–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', periodDay: '–î–µ–Ω—å', periodWeek: '–¢–∏–∂–¥–µ–Ω—å', periodMonth: '–ú—ñ—Å—è—Ü—å', employeeListTitle: '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', overallSummaryHeader: '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', overallSummarySubheader: '–ó–≤–µ–¥–µ–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.', kpiTotalClicks: '–í—Å—å–æ–≥–æ –¥—ñ–π', kpiMostActive: '–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π', kpiTopTemplate: '–¢–æ–ø —à–∞–±–ª–æ–Ω', kpiPeakTime: '–ü—ñ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (UTC)', top5Employees: '–¢–æ–ø-5 –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤', top5Templates: '–¢–æ–ø-5 –®–∞–±–ª–æ–Ω—ñ–≤', tableEmployee: '–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫', tableActions: '–î—ñ–π', tableTemplate: '–®–∞–±–ª–æ–Ω', tableUses: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å', userDetailHeader: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', userDetailSubheader: '–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ–±—Ä–∞–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞.', kpiLastActivity: '–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', kpiFavTemplate: '–£–ª—é–±–ª–µ–Ω–∏–π —à–∞–±–ª–æ–Ω', activityFeedTitle: '–°—Ç—Ä—ñ—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–æ—Å—Ç–∞–Ω–Ω—ñ 100 –¥—ñ–π)', tableTime: '–ß–∞—Å', tableSection: '–†–æ–∑–¥—ñ–ª', noData: '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥.', loading: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...', modalTitle: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É', modalChannelTitle: '1. –û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –∑–≤\'—è–∑–∫—É', modalManagerTitle: '2. –û–±–µ—Ä—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', modalCancel: '–°–∫–∞—Å—É–≤–∞—Ç–∏', modalConfirm: '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏', modalError: '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª —Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.', username_and_password_required: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å.', invalid_credentials: '–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.', server_error: '–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.', content_not_found: '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', content_read_error: '–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É.', invalid_token: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω.', access_denied: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.', content_updated_successfully: '–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!', server_error_on_save: '–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.', user_not_found: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', invalid_data_format: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.', favorites_updated: '–û–±—Ä–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ.', button_id_not_specified: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –∫–Ω–æ–ø–∫–∏.', click_tracking_error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∫–ª—ñ–∫—É.', analytics_db_error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑ –ë–î.', analytics_server_error: '–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.', analytics_load_error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', no_templates_for_button: '–ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤ –¥–ª—è —Ü—ñ—î—ó –∫–Ω–æ–ø–∫–∏', copy_success: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ({current}/{total})', copy_success_generic: '–¢–µ–∫—Å—Ç —É—Å–ø—ñ—à–Ω–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!', favorites_load_error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–±—Ä–∞–Ω–µ', favorites_save_error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ', missing_user_data: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å.', invalid_role: '–ù–µ–≤—ñ—Ä–Ω–∞ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.', user_created_successfully: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!', user_already_exists: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –≤–∂–µ —ñ—Å–Ω—É—î.', server_error_creating_user: '–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.', username_not_provided: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.', cannot_delete_self: '–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ.', user_deleted_successfully: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!', server_error_deleting_user: '–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.', server_error_fetching_users: '–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.'
    }
};

// ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ `fetchContent` –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
function getLocalStorage(key, defaultValue) { try { const val = localStorage.getItem(key); return val ? JSON.parse(val) : defaultValue; } catch (e) { return defaultValue; } }
function setLocalStorage(key, value) { try { localStorage.setItem(key, JSON.stringify(value)); } catch (e) { console.error(e); } }
function getTranslatedText(key, replacements = {}) { const lang = getLocalStorage('chaterlabLang', 'ru'); let text = (uiTexts[lang] && uiTexts[lang][key]) || uiTexts.ru[key] || key; for (const placeholder in replacements) { text = text.replace(`{${placeholder}}`, replacements[placeholder]); } return text; }
function showToast(message, isError = false) { const t = document.getElementById('toast'); t.textContent = message; t.style.backgroundColor = isError ? 'var(--error-color)' : 'var(--success-color)'; t.classList.add('show'); if (navigator.vibrate && !isError) navigator.vibrate(50); setTimeout(() => t.classList.remove('show'), 2000); }
function generateId(prefix) { return prefix + Date.now() + Math.random().toString(16).slice(2); }
const userStatusTexts = { ru: { user: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', status: '–°—Ç–∞—Ç—É—Å', admin: '–ú–µ–Ω–µ–¥–∂–µ—Ä', worker: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', access: '–†–∞–∑—Ä–µ—à–µ–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', noAccess: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ' }, en: { user: 'User', status: 'Status', admin: 'Manager', worker: 'Employee', access: 'Editing is allowed', noAccess: 'Editing is not available' }, uk: { user: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', status: '–°—Ç–∞—Ç—É—Å', admin: '–ú–µ–Ω–µ–¥–∂–µ—Ä', worker: '–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫', access: '–î–æ–∑–≤–æ–ª–µ–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', noAccess: '–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ' } };
function applyTranslations() { const lang = getLocalStorage('chaterlabLang', 'ru'); const texts = uiTexts[lang] || uiTexts.ru; document.querySelectorAll('[data-key]').forEach(el => { const key = el.dataset.key; if (texts[key]) { if (el.tagName === 'INPUT' && (el.placeholder !== undefined)) { el.placeholder = texts[key]; } else if (el.title !== undefined && el.title !== '') { el.title = texts[key] } else { el.textContent = texts[key]; } } }); }
function switchLanguage(lang) { setLocalStorage('chaterlabLang', lang); applyTranslations(); const langButtonsLogin = document.querySelectorAll('#language-switcher-login button'); langButtonsLogin.forEach(btn => { btn.classList.toggle('active', btn.dataset.lang === lang); }); if (document.getElementById('app-container').getAttribute('data-logged') === 'true') { const langButtonsApp = document.querySelectorAll('#language-switcher-app button'); langButtonsApp.forEach(btn => { btn.classList.toggle('active', btn.dataset.lang === lang); }); updateInstructions(lang); if (!isMobile()) { renderUserStatusCard(); } const analyticsPanel = document.getElementById('analytics-panel'); if (analyticsPanel && analyticsPanel.style.display === 'block') { analyticsPanel.dispatchEvent(new Event('languageChange')); } } }
async function checkLogin() { const authToken = getLocalStorage('chaterlabAuthToken', null); const savedRole = getLocalStorage('chaterlabUserRole', null); const savedName = getLocalStorage('chaterlabUserName', null); if (authToken && savedRole && savedName) { userRole = savedRole; userName = savedName; document.getElementById('login-screen').style.display = 'none'; document.body.classList.remove('login-active'); const appContainer = document.getElementById('app-container'); appContainer.setAttribute('data-logged', 'true'); appContainer.style.opacity = '1'; appContainer.style.display = 'block'; await fetchContent(); await fetchFavorites(); updateFavoritesUI(); setupDarkMode(); if (!isMobile()) { renderUserStatusCard(); } return true; } else { logout(false); return false; } }
async function handleLogin(event) { event.preventDefault(); const usernameInput = document.getElementById('login-username'); const passwordInput = document.getElementById('login-password'); const errorDiv = document.getElementById('login-error'); const username = usernameInput.value.trim(); const password = passwordInput.value.trim(); errorDiv.classList.remove('show'); try { const response = await fetch(`${API_BASE_URL}/login`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ username, password }) }); const data = await response.json(); if (!response.ok) throw new Error(data.message); setLocalStorage('chaterlabAuthToken', data.token); setLocalStorage('chaterlabUserRole', data.role); setLocalStorage('chaterlabUserName', username); if (!getLocalStorage('chaterlabLang', null)) setLocalStorage('chaterlabLang', 'ru'); userRole = data.role; userName = username; document.body.classList.remove('login-active'); document.getElementById('login-screen').style.display = 'none'; const overlay = document.getElementById('animation-overlay'); overlay.style.display = 'flex'; void overlay.offsetHeight; overlay.classList.add('animate'); setTimeout(async () => { overlay.style.display = 'none'; overlay.classList.remove('animate'); const appContainer = document.getElementById('app-container'); appContainer.style.display = 'block'; appContainer.setAttribute('data-logged', 'true'); appContainer.style.opacity = '1'; await fetchContent(); await fetchFavorites(); updateFavoritesUI(); setupDarkMode(); if (!isMobile()) { renderUserStatusCard(); } }, 2500); } catch (error) { errorDiv.textContent = getTranslatedText(error.message); errorDiv.classList.add('show'); } }
function logout(doUIRefresh = true) { localStorage.removeItem('chaterlabAuthToken'); localStorage.removeItem('chaterlabUserRole'); localStorage.removeItem('chaterlabUserName'); userRole = null; userName = null; if (doUIRefresh) { location.reload(); } }

async function fetchContent() {
    try {
        const response = await fetch(`${API_BASE_URL}/content`);
        if (!response.ok) {
            const data = await response.json(); throw new Error(data.message);
        };
        appContent = await response.json();
        
        // –õ–æ–≥–∏–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è
        if (isMobile()) {
            renderMobileTemplates();
            setupMobileNavigation();
        } else {
            renderSidebar();
            checkUserRoleAndSetupManagerUI();
            setupSearch();
        }
        
        updateInstructions(getLocalStorage('chaterlabLang', 'ru'));
        applyTranslations();

    } catch (error) {
        showToast(getTranslatedText(error.message), true);
    }
}

// ... —Ñ—É–Ω–∫—Ü–∏–∏ findButtonById, handleSidebarButtonClick, –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...
// –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–±–µ–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function findButtonById(buttonId) { if (!appContent.layout) return null; for (const section of appContent.layout) { const button = section.buttons.find(b => b.id === buttonId); if (button) return button; } return null; }
function handleSidebarButtonClick(buttonId) { const buttonData = findButtonById(buttonId); if (!buttonData) return; if (buttonData.type === 'contact_generator') { openContactModal(buttonData); } else { copyDynamicTemplate(buttonId); } }
const contactModal = document.getElementById('contact-generator-modal');
const managerSelect = document.getElementById('manager-select');
const confirmBtn = document.getElementById('modal-confirm-btn');
const cancelBtn = document.getElementById('modal-cancel-btn');
function openContactModal(buttonData) { managerSelect.innerHTML = ''; if (buttonData.manager_ids && appContent.managers) { buttonData.manager_ids.forEach(managerId => { const manager = appContent.managers[managerId]; if (manager) { const option = document.createElement('option'); option.value = managerId; option.textContent = manager.name; managerSelect.appendChild(option); } }); } confirmBtn.onclick = () => generateAndCopyContact(buttonData); contactModal.classList.add('show'); }
function closeContactModal() { contactModal.classList.remove('show'); confirmBtn.onclick = null; }
cancelBtn.addEventListener('click', closeContactModal);
contactModal.addEventListener('click', (e) => { if(e.target === contactModal) closeContactModal(); });
function generateAndCopyContact(buttonData) { const selectedChannelEl = document.querySelector('input[name="channel"]:checked'); const selectedManagerId = managerSelect.value; if (!selectedChannelEl || !selectedManagerId) { showToast(getTranslatedText('modalError'), true); return; } const channelName = selectedChannelEl.value; const manager = appContent.managers[selectedManagerId]; if (!manager) { showToast('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.', true); return; } const managerContact = channelName.toLowerCase() === 'telegram' ? manager.telegram : manager.whatsapp; if (buttonData.currentIndex === undefined) buttonData.currentIndex = 0; const baseTemplate = buttonData.templates[buttonData.currentIndex]; let finalText = baseTemplate; finalText = finalText.replace(/\{contact_method\}/g, channelName); finalText = finalText.replace(/\{manager_contact\}/g, managerContact); navigator.clipboard.writeText(finalText).then(() => { let message = getTranslatedText('copy_success'); const nextIndex = (buttonData.currentIndex + 1) % buttonData.templates.length; message = message.replace('{current}', buttonData.currentIndex + 1).replace('{total}', buttonData.templates.length); showToast(message); trackClick(buttonData.id); buttonData.currentIndex = nextIndex; }); closeContactModal(); }

// ===============================================================
// üì± –ù–ê–ß–ê–õ–û: –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–û–ô –í–ï–†–°–ò–ò
// ===============================================================

function setupMobileNavigation() {
    const bottomBar = document.getElementById('bottom-bar');
    const menuPanelOverlay = document.getElementById('menu-panel-overlay');

    const navButtons = [
        { id: 'templates', icon: 'üìù', labelKey: 'navTemplates' },
        { id: 'instructions', icon: '‚ÑπÔ∏è', labelKey: 'navInstructions' },
        { id: 'analytics', icon: 'üìä', labelKey: 'navAnalytics' },
        { id: 'menu', icon: '‚ò∞', labelKey: 'navMenu' }
    ];
    
    bottomBar.innerHTML = navButtons.map(btn => `
        <button class="bottom-bar-btn ${btn.id === 'templates' ? 'active' : ''}" data-page="${btn.id}">
            <span class="icon">${btn.icon}</span>
            <span class="label" data-key="${btn.labelKey}">${getTranslatedText(btn.labelKey)}</span>
        </button>
    `).join('');

    bottomBar.addEventListener('click', (e) => {
        const button = e.target.closest('.bottom-bar-btn');
        if (!button) return;
        
        const pageId = button.dataset.page;
        if (pageId === 'menu') {
            toggleMenuPanel(true);
        } else {
            showMobilePage(pageId);
        }
    });
    
    menuPanelOverlay.addEventListener('click', (e) => {
        if (e.target === menuPanelOverlay) {
            toggleMenuPanel(false);
        }
    });
}

function showMobilePage(pageId) {
    const pages = document.querySelectorAll('.mobile-page');
    const buttons = document.querySelectorAll('.bottom-bar-btn');
    const headerTitle = document.getElementById('mobile-header-title');

    pages.forEach(p => p.classList.remove('active'));
    buttons.forEach(b => b.classList.remove('active'));

    const targetPage = document.getElementById(`page-${pageId}`);
    if (targetPage) {
        targetPage.classList.add('active');
        if (pageId === 'editor') {
            document.getElementById('mobile-header').style.display = 'none';
        } else {
            document.getElementById('mobile-header').style.display = 'block';
        }
    }

    const activeButton = document.querySelector(`.bottom-bar-btn[data-page="${pageId}"]`);
    if (activeButton) {
        activeButton.classList.add('active');
        headerTitle.textContent = activeButton.querySelector('.label').textContent;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
    if (pageId === 'analytics') renderMobileAnalytics();
}

function toggleMenuPanel(show) {
    const overlay = document.getElementById('menu-panel-overlay');
    renderMenuPanel();
    if (show) {
        overlay.classList.add('show');
    } else {
        overlay.classList.remove('show');
    }
}

function renderMenuPanel() {
    const container = document.getElementById('menu-panel');
    const isManager = userRole === 'manager';
    
    container.innerHTML = `
        <div class="menu-panel-handle"></div>
        <div class="menu-profile">
            <div class="menu-profile-name">${userName}</div>
            <div class="menu-profile-role" data-key="${isManager ? 'manager' : 'employee'}"></div>
        </div>
        <div class="menu-item">
            <span data-key="darkMode"></span>
            <label class="theme-switch" for="mobile-theme-checkbox"><input type="checkbox" id="mobile-theme-checkbox" /><div class="slider round"></div></label>
        </div>
        <div class="menu-item" id="mobile-lang-switcher">
            <span>${getTranslatedText('–Ø–∑—ã–∫')}</span>
            <div>
                <button data-lang="ru" class="lang-btn-app">RU</button>
                <button data-lang="en" class="lang-btn-app">EN</button>
                <button data-lang="uk" class="lang-btn-app">UA</button>
            </div>
        </div>
        ${isManager ? `<button id="open-editor-btn" class="menu-item-btn" data-key="openEditor"></button>` : ''}
        <button id="logout-btn-mobile" class="menu-item-logout" data-key="logout"></button>
    `;

    // –î—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    const mobileToggle = document.getElementById('mobile-theme-checkbox');
    mobileToggle.checked = document.body.classList.contains('dark-mode');
    mobileToggle.addEventListener('change', () => {
        document.getElementById('theme-checkbox').click(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–º
    });
    
    document.getElementById('mobile-lang-switcher').addEventListener('click', (e) => {
        if(e.target.dataset.lang) switchLanguage(e.target.dataset.lang);
    });

    const currentLang = getLocalStorage('chaterlabLang', 'ru');
    document.querySelector(`#mobile-lang-switcher .lang-btn-app[data-lang="${currentLang}"]`).classList.add('active');
    
    if (isManager) {
        document.getElementById('open-editor-btn').addEventListener('click', openMobileEditor);
    }
    
    document.getElementById('logout-btn-mobile').addEventListener('click', () => logout());
    applyTranslations();
}

function openMobileEditor() {
    toggleMenuPanel(false);
    const editorPage = document.getElementById('page-editor');
    editorPage.classList.add('active');
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    buildMobileEditor(); 
}

function renderMobileTemplates() {
    const container = document.getElementById('mobile-sidebar-content');
    container.innerHTML = '';
     appContent.layout?.forEach(section => {
        const sectionDiv = document.createElement('div');
        sectionDiv.className = 'sidebar-section';
        const title = document.createElement('h2');
        title.textContent = section.title;
        sectionDiv.appendChild(title);

        const buttonsContainer = document.createElement('div');
        buttonsContainer.className = 'buttons-container';

        section.buttons.forEach(buttonData => {
            const button = document.createElement('button');
            button.className = 'sidebar-button';
            button.dataset.buttonId = buttonData.id;
            button.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M8 17.929H6c-1.105 0-2-.912-2-2.036V5.036C4 3.91 4.895 3 6 3h8c1.105 0 2 .911 2 2.036v1.866m-6 .17h8c1.105 0 2 .91 2 2.035v10.857C20 21.09 19.105 22 18 22h-8c-1.105 0-2-.911-2-2.036V9.107c0-1.124.895-2.036 2-2.036z"/></svg><span>${buttonData.label}</span>`;
            buttonsContainer.appendChild(button);
        });
        sectionDiv.appendChild(buttonsContainer);
        container.appendChild(sectionDiv);
    });
    
    // –õ–æ–≥–∏–∫–∞ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
    container.addEventListener('click', (e) => {
        const header = e.target.closest('h2');
        if (header) {
            header.parentElement.classList.toggle('active');
        }
        const button = e.target.closest('.sidebar-button');
        if(button) {
            handleSidebarButtonClick(button.dataset.buttonId);
            createRipple(e);
        }
    });
}

function renderMobileAnalytics() {
    const container = document.getElementById('page-analytics');
    if (userRole === 'manager') {
        container.innerHTML = `<div id="mobile-analytics-content"></div>`;
        fetchAndRenderMobileAnalytics();
    } else {
        container.innerHTML = `<div class="analytics-placeholder"><span style="font-size: 48px;">üìä</span><h3 data-key="analyticsTitle"></h3><p data-key="analyticsOnlyForManagers"></p></div>`;
    }
    applyTranslations();
}

function createRipple(event) {
    const button = event.currentTarget.closest('.sidebar-button');
    const circle = document.createElement("span");
    const diameter = Math.max(button.clientWidth, button.clientHeight);
    const radius = diameter / 2;
    circle.style.width = circle.style.height = `${diameter}px`;
    circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
    circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
    circle.classList.add("ripple");
    const ripple = button.getElementsByClassName("ripple")[0];
    if (ripple) { ripple.remove(); }
    button.appendChild(circle);
}

// ===============================================================
// üì± –ö–û–ù–ï–¶: –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–û–ô –í–ï–†–°–ò–ò
// ===============================================================


// ===============================================================
// üíª –ù–ê–ß–ê–õ–û: –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –î–ï–°–ö–¢–û–ü–ù–û–ô –í–ï–†–°–ò–ò
// ===============================================================

function renderSidebar() {
    const container = document.getElementById('sidebar-content');
    container.innerHTML = '';
    appContent.layout?.forEach(section => {
        const sectionDiv = document.createElement('div');
        sectionDiv.className = 'sidebar-section';
        const title = document.createElement('h2');
        title.textContent = section.title;
        sectionDiv.appendChild(title);

        const buttonsContainer = document.createElement('div');
        buttonsContainer.className = 'buttons-container';

        section.buttons.forEach(buttonData => {
            const button = document.createElement('button');
            button.className = 'sidebar-button';
            button.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M8 17.929H6c-1.105 0-2-.912-2-2.036V5.036C4 3.91 4.895 3 6 3h8c1.105 0 2 .911 2 2.036v1.866m-6 .17h8c1.105 0 2 .91 2 2.035v10.857C20 21.09 19.105 22 18 22h-8c-1.105 0-2-.911-2-2.036V9.107c0-1.124.895-2.036 2-2.036z"/></svg><span>${buttonData.label}</span><div class="favorite-star" data-button-id="${buttonData.id}">‚òÜ</div>`;
            button.onclick = (e) => { 
                if (e.target.classList.contains('favorite-star')) return; 
                handleSidebarButtonClick(buttonData.id);
            };
            buttonsContainer.appendChild(button);
        });
        sectionDiv.appendChild(buttonsContainer);
        container.appendChild(sectionDiv);
    });
    document.querySelector('.sidebar-scrollable-content').addEventListener('click', handleFavoriteClick);
}

function renderUserStatusCard() {
    const card = document.getElementById('user-status-card');
    if (!card || !userName || !userRole) return;
    const currentLang = getLocalStorage('chaterlabLang', 'ru');
    const texts = userStatusTexts[currentLang] || userStatusTexts.ru;
    let statusText, accessText, statusColor;
    if (userRole === 'manager') {
        statusText = texts.admin; accessText = texts.access; statusColor = 'var(--accent-purple)';
    } else {
        statusText = texts.worker; accessText = texts.noAccess; statusColor = 'var(--text-secondary)';
    }
    card.innerHTML = `<div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 8px;"><span style="font-weight: 600; color: var(--text-primary);">${texts.user}:</span><span style="font-weight: 700; color: var(--primary-blue);">${userName}</span></div><div style="display: flex; align-items: center; justify-content: space-between;"><span style="font-weight: 600; color: var(--text-primary);">${texts.status}:</span><span style="font-weight: 700; color: ${statusColor};">${statusText}</span></div><div style="margin-top: 8px; border-top: 1px solid var(--border-color); padding-top: 8px; text-align: center;"><span style="color: ${userRole === 'manager' ? 'var(--success-color)' : 'var(--text-secondary)'}; font-weight: 500;">${accessText}</span></div>`;
}
// ... –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ `checkUserRoleAndSetupManagerUI` ...
function updateInstructions(lang) {
    const desktopInstructions = document.getElementById('instructions-desktop');
    const mobileInstructions = document.getElementById('instructions-mobile');
    let content = '';
    if (appContent.instructionsContent && appContent.instructionsContent[lang]) {
        content = appContent.instructionsContent[lang];
    } else {
        const fallbackMessage = { 'ru': '<h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h3><p>–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</p>', 'en': '<h3>Instructions Not Found</h3><p>No instructions are available for the selected language in the database.</p>', 'uk': '<h3>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞</h3><p>–î–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏ –Ω–µ–º–∞—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.</p>' };
        content = fallbackMessage[lang] || fallbackMessage['ru'];
    }
    if(desktopInstructions) desktopInstructions.innerHTML = content;
    if(mobileInstructions) mobileInstructions.innerHTML = content;
}

async function trackClick(buttonId) { const token = getLocalStorage('chaterlabAuthToken', ''); if (!token) return; try { await fetch(`${API_BASE_URL}/api/track-click`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify({ buttonId: buttonId }) }); } catch (error) { console.error('Failed to track click:', error); } }
function copyDynamicTemplate(buttonId) { let targetButton = findButtonById(buttonId); if (!targetButton || !targetButton.templates || targetButton.templates.length === 0) { showToast(getTranslatedText('no_templates_for_button'), true); return; } if (targetButton.currentIndex === undefined) targetButton.currentIndex = 0; const textToCopy = targetButton.templates[targetButton.currentIndex]; navigator.clipboard.writeText(textToCopy).then(() => { let message = getTranslatedText('copy_success'); message = message.replace('{current}', targetButton.currentIndex + 1).replace('{total}', targetButton.templates.length); showToast(message); trackClick(buttonId); }); targetButton.currentIndex = (targetButton.currentIndex + 1) % targetButton.templates.length; }
async function fetchFavorites() { const token = getLocalStorage('chaterlabAuthToken', ''); if (!token) return; try { const response = await fetch(`${API_BASE_URL}/api/favorites`, { headers: { 'Authorization': `Bearer ${token}` } }); if (!response.ok) throw new Error(getTranslatedText('favorites_load_error')); const data = await response.json(); userFavorites = data.favorites || []; } catch (error) { showToast(error.message, true); userFavorites = []; } }
async function saveFavorites() { const token = getLocalStorage('chaterlabAuthToken', ''); if (!token) return; try { await fetch(`${API_BASE_URL}/api/favorites`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }, body: JSON.stringify({ favorites: userFavorites }) }); } catch (error) { showToast(getTranslatedText('favorites_save_error'), true); } }
function handleFavoriteClick(event) { const star = event.target; if (!star.classList.contains('favorite-star')) return; const buttonId = star.dataset.buttonId; if (!buttonId) return; const index = userFavorites.indexOf(buttonId); if (index > -1) { userFavorites.splice(index, 1); } else { userFavorites.push(buttonId); } updateFavoritesUI(); saveFavorites(); }
function updateFavoritesUI() { const favoritesContainer = document.getElementById('favorites-content'); const favoritesSection = document.getElementById('favorites-section'); if (!favoritesContainer || !favoritesSection) return; favoritesContainer.innerHTML = ''; const allButtons = new Map(); appContent.layout?.forEach(section => { section.buttons.forEach(btn => allButtons.set(btn.id, btn)); }); userFavorites.forEach(favId => { const buttonData = allButtons.get(favId); if (buttonData) { const button = document.createElement('button'); button.className = 'sidebar-button'; button.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M8 17.929H6c-1.105 0-2-.912-2-2.036V5.036C4 3.91 4.895 3 6 3h8c1.105 0 2 .911 2 2.036v1.866m-6 .17h8c1.105 0 2 .91 2 2.035v10.857C20 21.09 19.105 22 18 22h-8c-1.105 0-2-.911-2-2.036V9.107c0-1.124.895-2.036 2-2.036z"/></svg><span>${buttonData.label}</span><div class="favorite-star favorited" data-button-id="${buttonData.id}">‚òÖ</div>`; button.onclick = (e) => { if (e.target.classList.contains('favorite-star')) return; handleSidebarButtonClick(buttonData.id); }; favoritesContainer.appendChild(button); } }); if (userFavorites.length > 0) { favoritesSection.style.display = 'block'; } else { favoritesSection.style.display = 'none'; } document.querySelectorAll('.sidebar-button .favorite-star').forEach(star => { const buttonId = star.dataset.buttonId; if (userFavorites.includes(buttonId)) { star.classList.add('favorited'); star.innerHTML = '‚òÖ'; } else { star.classList.remove('favorited'); star.innerHTML = '‚òÜ'; } }); }
function setupDarkMode() { const toggle = document.getElementById('theme-checkbox'); const applyTheme = (theme) => { document.body.classList.toggle('dark-mode', theme === 'dark'); if (toggle) toggle.checked = (theme === 'dark'); if (!isMobile() && document.getElementById('content-editor') && document.getElementById('content-editor').style.display === 'block') { tinymce.remove(); initInstructionsEditor(); } }; const savedTheme = getLocalStorage('chaterlabTheme', 'light'); applyTheme(savedTheme); if (toggle) toggle.addEventListener('change', () => { const theme = toggle.checked ? 'dark' : 'light'; setLocalStorage('chaterlabTheme', theme); applyTheme(theme); }); }
function setupSearch() { const searchInput = document.getElementById('searchInput'); if (!searchInput) return; searchInput.addEventListener('input', (e) => { const searchTerm = e.target.value.toLowerCase().trim(); document.querySelectorAll('#sidebar-content .sidebar-section').forEach(section => { let sectionHasVisibleButton = false; const buttons = section.querySelectorAll('.sidebar-button'); buttons.forEach(button => { const buttonLabel = button.querySelector('span').textContent.toLowerCase(); if (buttonLabel.includes(searchTerm)) { button.style.display = 'flex'; sectionHasVisibleButton = true; } else { button.style.display = 'none'; } }); const sectionTitle = section.querySelector('h2'); if(sectionTitle) sectionTitle.style.display = sectionHasVisibleButton ? 'block' : 'none'; }); }); }
function checkUserRoleAndSetupManagerUI() {
    if (userRole === 'manager' && !isMobile()) {
        const managerControls = document.querySelector('.manager-controls-segmented');
        if (managerControls) managerControls.style.display = 'flex';
        const triggerAnalyticsLoad = setupAnalytics();
        const buttons = document.querySelectorAll('.manager-controls-segmented button');
        const glider = document.querySelector('.manager-controls-segmented .glider');
        const mainContentPanel = document.getElementById('main-content-wrapper-desktop');
        const analyticsPanel = document.getElementById('analytics-panel');

        function moveGlider(target) { buttons.forEach(btn => btn.classList.remove('active')); target.classList.add('active'); glider.style.width = `${target.offsetWidth}px`; glider.style.left = `${target.offsetLeft}px`; }
        buttons.forEach(button => { button.addEventListener('click', (e) => { moveGlider(e.currentTarget); if (button.id === 'show-instructions-btn') switchManagerView('instructions'); if (button.id === 'show-analytics-btn') switchManagerView('analytics'); if (button.id === 'edit-mode-btn') switchManagerView('editor'); }); });
        const activeButton = document.querySelector('.manager-controls-segmented button.active');
        if (activeButton) { setTimeout(() => moveGlider(activeButton), 50); }

        function switchManagerView(view) {
             const instructionsDiv = document.getElementById('instructions-desktop');
             const editorDiv = document.getElementById('content-editor');

            mainContentPanel.style.display = 'block';
            analyticsPanel.style.display = 'none';
            instructionsDiv.style.display = 'none';
            editorDiv.style.display = 'none';

            if (view === 'instructions') {
                instructionsDiv.style.display = 'block';
            } else if (view === 'analytics') {
                analyticsPanel.style.display = 'block';
                if (triggerAnalyticsLoad) triggerAnalyticsLoad();
            } else if (view === 'editor') {
                 // –¢—É—Ç –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞
            }
        }
    }
}
async function fetchAndRenderMobileAnalytics() {
    const contentDiv = document.getElementById('mobile-analytics-content');
    if(!contentDiv) return;
    contentDiv.innerHTML = `<p>${getTranslatedText('loading')}</p>`;
    const token = getLocalStorage('chaterlabAuthToken', '');
    try {
        const response = await fetch(`${API_BASE_URL}/api/analytics?period=day`, { headers: { 'Authorization': `Bearer ${token}` } });
        if (!response.ok) throw new Error(getTranslatedText('analytics_load_error'));
        const data = await response.json();
        const texts = uiTexts[getLocalStorage('chaterlabLang', 'ru')];
        const totalClicks = data.detailed_log.length;
        const topEmployee = data.employee_summary?.[0]?.username || '‚Äî';
        const topTemplateId = data.template_summary?.[0]?.button_id;
        const topTemplateLabel = topTemplateId ? (findButtonById(topTemplateId)?.label || '‚Äî') : '‚Äî';
        contentDiv.innerHTML = `<div class="kpi-grid"><div class="kpi-card"><p class="kpi-card-title">${texts.kpiTotalClicks}</p><h3 class="kpi-card-value">${totalClicks}</h3></div><div class="kpi-card"><p class="kpi-card-title">${texts.kpiMostActive}</p><h3 class="kpi-card-value">${topEmployee}</h3></div></div><div class="kpi-card" style="margin-top: 16px;"><p class="kpi-card-title">${texts.kpiTopTemplate}</p><h3 class="kpi-card-value">${topTemplateLabel}</h3></div>`;
    } catch (error) {
        contentDiv.innerHTML = `<p style="color: var(--error-color);">${error.message}</p>`;
    }
}
function setupAnalytics() {
    const mainPanel = document.getElementById('analytics-main');
    const employeeList = document.getElementById('employee-list');
    const periodSelector = document.querySelector('.analytics-period-selector');
    const analyticsPanel = document.getElementById('analytics-panel');
    if(!mainPanel || !employeeList || !periodSelector || !analyticsPanel) return;

    let currentPeriod = 'day'; let selectedUser = null; let fullData = null; const DateTime = luxon.DateTime;
    analyticsPanel.addEventListener('languageChange', renderAnalytics);
    periodSelector.addEventListener('click', (e) => { if (e.target.tagName === 'BUTTON' && !e.target.classList.contains('active')) { periodSelector.querySelector('.active').classList.remove('active'); e.target.classList.add('active'); currentPeriod = e.target.dataset.period; fetchAndRenderAnalytics(); } });
    employeeList.addEventListener('click', (e) => { const li = e.target.closest('li'); if (li) { const username = li.dataset.username; selectedUser = (username === 'all') ? null : username; renderAnalytics(); } });

    async function fetchAndRenderAnalytics() { mainPanel.innerHTML = `<div id="analytics-loader">${getTranslatedText('loading')}</div>`; employeeList.innerHTML = ''; const token = getLocalStorage('chaterlabAuthToken', ''); try { const response = await fetch(`${API_BASE_URL}/api/analytics?period=${currentPeriod}`, { headers: { 'Authorization': `Bearer ${token}` } }); if (!response.ok) throw new Error(getTranslatedText('analytics_load_error')); fullData = await response.json(); renderAnalytics(); } catch (error) { showToast(error.message, true); mainPanel.innerHTML = `<div class="no-data-message">${error.message}</div>`; } }
    function renderAnalytics() { if (!fullData) return; const lang = getLocalStorage('chaterlabLang', 'ru'); const texts = uiTexts[lang] || uiTexts.ru; renderEmployeeList(fullData.employee_summary, texts); if (selectedUser) { renderUserDetailView(selectedUser, fullData, texts); } else { renderOverallSummaryView(fullData, texts); } }
    function renderEmployeeList(summary, texts) { employeeList.innerHTML = `<li data-username="all" class="${!selectedUser ? 'active' : ''}"><span class="employee-name">${texts.employeeListTitle}</span></li>`; if(summary && summary.length > 0) { summary.forEach(emp => { const li = document.createElement('li'); li.dataset.username = emp.username; li.className = (selectedUser === emp.username) ? 'active' : ''; li.innerHTML = `<span class="employee-name">${emp.username}</span><span class="employee-clicks">${emp.count}</span>`; employeeList.appendChild(li); }); } }
    function getButtonData(buttonId) { if (!appContent.layout) return { label: `(ID: ${buttonId})`, section: 'N/A' }; for (const section of appContent.layout) { const button = section.buttons.find(b => b.id === buttonId); if (button) return { label: button.label, section: section.title }; } return { label: `(—É–¥–∞–ª–µ–Ω: ${buttonId})`, section: 'N/A' }; }
    function formatRelativeTime(isoString, lang) { if (!isoString) return '–Ω–∏–∫–æ–≥–¥–∞'; return DateTime.fromISO(isoString).setLocale(lang).toRelative(); }
    function renderOverallSummaryView(data, texts) { const topEmployee = data.employee_summary?.[0]?.username || '‚Äî'; const topTemplateId = data.template_summary?.[0]?.button_id; const topTemplateLabel = topTemplateId ? getButtonData(topTemplateId).label : '‚Äî'; const peakHour = data.peak_hour; const peakTimeText = (peakHour !== null && peakHour !== undefined) ? `${String(peakHour).padStart(2, '0')}:00 - ${String(peakHour + 1).padStart(2, '0')}:00` : '‚Äî'; let topTemplatesHtml = data.template_summary?.slice(0, 5).map(t => `<tr><td>${getButtonData(t.button_id).label}</td><td class="count-cell">${t.count}</td></tr>`).join('') || `<tr><td colspan="2">${texts.noData}</td></tr>`; let topEmployeesHtml = data.employee_summary?.slice(0, 5).map(e => `<tr><td>${e.username}</td><td class="count-cell">${e.count}</td></tr>`).join('') || `<tr><td colspan="2">${texts.noData}</td></tr>`; if (!data.detailed_log || data.detailed_log.length === 0) { mainPanel.innerHTML = `<div class="no-data-message">${texts.noData}</div>`; return; } mainPanel.innerHTML = `<div class="analytics-main-header"><h2>${texts.overallSummaryHeader}</h2><p>${texts.overallSummarySubheader}</p></div><div class="kpi-grid"><div class="kpi-card"><p class="kpi-card-title">${texts.kpiTotalClicks}</p><h3 class="kpi-card-value">${data.detailed_log.length}</h3></div><div class="kpi-card"><p class="kpi-card-title">${texts.kpiMostActive}</p><h3 class="kpi-card-value">${topEmployee}</h3></div><div class="kpi-card"><p class="kpi-card-title">${texts.kpiTopTemplate}</p><h3 class="kpi-card-value">${topTemplateLabel}</h3></div><div class="kpi-card"><p class="kpi-card-title">${texts.kpiPeakTime}</p><h3 class="kpi-card-value">${peakTimeText}</h3></div></div><div class="analytics-section"><h4>${texts.top5Employees}</h4><table class="analytics-table"><thead><tr><th>${texts.tableEmployee}</th><th style="text-align:right;">${texts.tableActions}</th></tr></thead><tbody>${topEmployeesHtml}</tbody></table></div><div class="analytics-section"><h4>${texts.top5Templates}</h4><table class="analytics-table"><thead><tr><th>${texts.tableTemplate}</th><th style="text-align:right;">${texts.tableUses}</th></tr></thead><tbody>${topTemplatesHtml}</tbody></table></div>`; }
    function renderUserDetailView(username, data, texts) { const userData = data.employee_summary.find(e => e.username === username); const userLog = data.detailed_log.filter(log => log.username === username); const userTemplateCounts = userLog.reduce((acc, log) => { acc[log.button_id] = (acc[log.button_id] || 0) + 1; return acc; }, {}); const topTemplateId = Object.keys(userTemplateCounts).sort((a, b) => userTemplateCounts[b] - userTemplateCounts[a])[0]; const topTemplateLabel = topTemplateId ? getButtonData(topTemplateId).label : '‚Äî'; let logHtml = userLog.slice(0, 100).map(log => { const btnData = getButtonData(log.button_id); return `<tr><td class="time-cell">${DateTime.fromISO(log.created_at).toFormat('HH:mm:ss')}</td><td>${btnData.label}</td><td class="time-cell">${btnData.section}</td></tr>` }).join(''); mainPanel.innerHTML = `<div class="analytics-main-header"><h2>${texts.userDetailHeader} ${username}</h2><p>${texts.userDetailSubheader}</p></div><div class="kpi-grid"><div class="kpi-card"><p class="kpi-card-title">${texts.kpiTotalClicks}</p><h3 class="kpi-card-value">${userData?.count || 0}</h3></div><div class="kpi-card"><p class="kpi-card-title">${texts.kpiLastActivity}</p><h3 class="kpi-card-value">${formatRelativeTime(userData?.last_activity, texts.lang_locale || 'ru')}</h3></div><div class="kpi-card"><p class="kpi-card-title">${texts.kpiFavTemplate}</p><h3 class="kpi-card-value">${topTemplateLabel}</h3></div></div><div class="analytics-section"><h4>${texts.activityFeedTitle}</h4><div style="max-height: 400px; overflow-y: auto;"><table class="analytics-table"><thead><tr><th>${texts.tableTime}</th><th>${texts.tableTemplate}</th><th>${texts.tableSection}</th></tr></thead><tbody>${logHtml || `<tr><td colspan="3" style="text-align:center;">${texts.noData}</td></tr>`}</tbody></table></div></div>`; }
    return fetchAndRenderAnalytics;
}
// –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–µ—Ç—Å—è, —Ç.–∫. –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
function buildMobileEditor() { /* –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ */ console.log("Building mobile editor"); }

// ... —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ...

// ===============================================================
// üíª –ö–û–ù–ï–¶: –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –î–ï–°–ö–¢–û–ü–ù–û–ô –í–ï–†–°–ò–ò
// ===============================================================

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
document.addEventListener('DOMContentLoaded', () => {
    const initialLang = getLocalStorage('chaterlabLang', 'ru');
    switchLanguage(initialLang);
    document.querySelectorAll('#language-switcher-login button').forEach(button => { button.addEventListener('click', (e) => switchLanguage(e.target.dataset.lang)); });
    
    // –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ checkLogin –¥–ª—è —Ä–∞–Ω–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const appLangButtons = document.querySelectorAll('#language-switcher-app button');
    if(appLangButtons.length > 0) {
       appLangButtons.forEach(button => { button.addEventListener('click', (e) => switchLanguage(e.target.dataset.lang)); });
    }

    checkLogin();
    document.getElementById('login-form').addEventListener('submit', handleLogin);
});